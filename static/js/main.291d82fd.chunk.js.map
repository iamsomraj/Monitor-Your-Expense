{"version":3,"sources":["components/Expense/ExpenseDate.tsx","components/UI/Card.tsx","components/Expense/ExpensesFilter.tsx","components/Expense/ExpenseItem.tsx","components/Expense/ExpensesList.tsx","components/Chart/ChartBar.tsx","components/Chart/Chart.tsx","components/Expense/ExpenseChart.tsx","components/Expense/Expenses.tsx","components/NewExpense/ExpenseForm.tsx","components/NewExpense/NewExpense.tsx","App.tsx","index.tsx"],"names":["ExpenseDate","props","month","date","toLocaleString","day","year","className","Card","classes","children","ExpensesFilter","value","onChange","event","onYearChange","target","ExpenseItem","title","amount","ExpensesList","items","length","map","expense","id","ChartBar","chartBarHeight","max","Math","round","style","height","label","Chart","dataPointValues","dataPoints","datapoint","maxValue","dataPoint","ExpenseChart","dataPointsForChart","getMonth","Expenses","useState","selectedYear","setSelectedYear","filteredExpenses","expenses","filter","getFullYear","parseInt","ExpenseForm","setTitle","setAmount","setDate","shouldFormBeDisplayed","setShouldFormBeDisplayed","hideFormHandler","onClick","onSubmit","preventDefault","expenseItem","Date","onSaveExpenseData","type","min","step","NewExpense","enteredExpenseData","random","toString","onAddExpense","DUMMY_EXPENSES","App","setExpenses","prevExpenses","parseFloat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.291d82fd.chunk.js","sourcesContent":["import \"./ExpenseDate.css\";\r\n\r\ninterface ExpenseDateProps {\r\n  date: Date;\r\n}\r\n\r\nconst ExpenseDate: React.FC<ExpenseDateProps> = (props) => {\r\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\r\n  const year = props.date.toLocaleString(\"en-US\", { year: \"numeric\" });\r\n\r\n  return (\r\n    <div className=\"expense-date\">\r\n      <div className=\"expense-date__month\">{month}</div>\r\n      <div className=\"expense-date__day\">{day}</div>\r\n      <div className=\"expense-date__year\">{year}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseDate;\r\n","const Card: React.FC<{ className: string }> = (props) => {\r\n  const classes = \"card \" + props.className;\r\n  return <div className={classes}>{props.children}</div>;\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./ExpensesFilter.css\";\r\n\r\ninterface ExpensesFilterProps {\r\n  onYearChange: (year: string) => void;\r\n  year: string;\r\n}\r\n\r\nconst ExpensesFilter: React.FC<ExpensesFilterProps> = (props) => {\r\n  const dropdownChangeHandler: React.ChangeEventHandler<HTMLSelectElement> = (\r\n    event\r\n  ) => {\r\n    props.onYearChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>Filter by year</label>\r\n        <select value={props.year} onChange={dropdownChangeHandler}>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import React from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpenseDate from \"./ExpenseDate\";\r\nimport \"./ExpenseItem.css\";\r\n\r\ninterface ExpenseItemProps {\r\n  title: string;\r\n  amount: number;\r\n  date: Date;\r\n}\r\n\r\nconst ExpenseItem: React.FC<ExpenseItemProps> = (props) => {\r\n  return (\r\n    <li>\r\n      <Card className=\"expense-item\">\r\n        <ExpenseDate date={props.date} />\r\n        <div className=\"expense-item__description\">\r\n          <h2>{props.title}</h2>\r\n          <div className=\"expense-item__price\">${props.amount}</div>\r\n        </div>\r\n      </Card>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ExpenseItem;\r\n","import ExpenseItem from \"./ExpenseItem\";\r\nimport \"./ExpensesList.css\";\r\ninterface ExpensesListProp {\r\n  items: {\r\n    id: string;\r\n    title: string;\r\n    amount: number;\r\n    date: Date;\r\n  }[];\r\n}\r\n\r\nconst ExpensesList: React.FC<ExpensesListProp> = (props) => {\r\n  if (props.items.length === 0) {\r\n    return <h2 className=\"expenses-list__fallback\">Found no expenses</h2>;\r\n  }\r\n\r\n  return (\r\n    <ul className=\"expenses-list\">\r\n      {props.items.map((expense) => (\r\n        <ExpenseItem key={expense.id} {...expense} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ExpensesList;\r\n","import \"./ChartBar.css\";\r\n\r\ninterface ChartBarProps {\r\n  max: number;\r\n  label: string;\r\n  value: number;\r\n}\r\n\r\nconst ChartBar: React.FC<ChartBarProps> = (props) => {\r\n  let chartBarHeight = \"0%\";\r\n\r\n  if (props.max > 0) {\r\n    chartBarHeight = Math.round((props.value / props.max) * 100) + \"%\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div\r\n          className=\"chart-bar__fill\"\r\n          style={{ height: chartBarHeight }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"chart-bar__label\">{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n","import \"./Chart.css\";\r\nimport ChartBar from \"./ChartBar\";\r\n\r\ninterface ChartProps {\r\n  dataPoints: {\r\n    label: string;\r\n    value: number;\r\n  }[];\r\n}\r\n\r\nconst Chart: React.FC<ChartProps> = (props) => {\r\n  const dataPointValues = props.dataPoints.map((datapoint) => datapoint.value);\r\n  const maxValue = Math.max(...dataPointValues);\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => (\r\n        <ChartBar key={dataPoint.label} max={maxValue} {...dataPoint} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import Chart from \"../Chart/Chart\";\r\n\r\ninterface ExpenseChartProps {\r\n  items: {\r\n    id: string;\r\n    title: string;\r\n    amount: number;\r\n    date: Date;\r\n  }[];\r\n}\r\n\r\nconst ExpenseChart: React.FC<ExpenseChartProps> = (props) => {\r\n  const dataPointsForChart = [\r\n    { label: \"Jan\", value: 0 },\r\n    { label: \"Feb\", value: 0 },\r\n    { label: \"Mar\", value: 0 },\r\n    { label: \"Apr\", value: 0 },\r\n    { label: \"May\", value: 0 },\r\n    { label: \"Jun\", value: 0 },\r\n    { label: \"Jul\", value: 0 },\r\n    { label: \"Aug\", value: 0 },\r\n    { label: \"Sep\", value: 0 },\r\n    { label: \"Oct\", value: 0 },\r\n    { label: \"Nov\", value: 0 },\r\n    { label: \"Dec\", value: 0 },\r\n  ];\r\n\r\n  for (const expense of props.items) {\r\n    dataPointsForChart[expense.date.getMonth()].value += expense.amount;\r\n  }\r\n\r\n  return <Chart dataPoints={dataPointsForChart} />;\r\n};\r\n\r\nexport default ExpenseChart;\r\n","import \"./ExpenseDate\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport { useState } from \"react\";\r\nimport ExpensesList from \"./ExpensesList\";\r\nimport ExpenseChart from \"./ExpenseChart\";\r\n\r\ninterface ExpensesProp {\r\n  expenses: {\r\n    id: string;\r\n    title: string;\r\n    amount: number;\r\n    date: Date;\r\n  }[];\r\n}\r\n\r\nconst Expenses: React.FC<ExpensesProp> = (props) => {\r\n  const [selectedYear, setSelectedYear] = useState(\"2021\");\r\n  const filteredExpenses = props.expenses.filter(\r\n    (expense) => expense.date.getFullYear() === parseInt(selectedYear)\r\n  );\r\n\r\n  const yearChangeHandler = (year: string) => {\r\n    setSelectedYear(year);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter year={selectedYear} onYearChange={yearChangeHandler} />\r\n        <ExpenseChart items={filteredExpenses} />\r\n        <ExpensesList items={filteredExpenses} />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expenses;\r\n","import React, { useState } from \"react\";\r\nimport \"./ExpenseForm.css\";\r\n\r\ninterface ExpenseFormProps {\r\n  onSaveExpenseData: (item: {\r\n    title: string;\r\n    amount: string;\r\n    date: Date;\r\n  }) => void;\r\n}\r\n\r\nconst ExpenseForm: React.FC<ExpenseFormProps> = (props) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [shouldFormBeDisplayed, setShouldFormBeDisplayed] = useState(false);\r\n\r\n  const titleChangeHandler: React.ChangeEventHandler<HTMLInputElement> = (\r\n    event\r\n  ) => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  const amountChangeHandler: React.ChangeEventHandler<HTMLInputElement> = (\r\n    event\r\n  ) => {\r\n    setAmount(event.target.value);\r\n  };\r\n\r\n  const dateChangeHandler: React.ChangeEventHandler<HTMLInputElement> = (\r\n    event\r\n  ) => {\r\n    setDate(event.target.value);\r\n  };\r\n\r\n  const clearFormHandler = () => {\r\n    setTitle(\"\");\r\n    setAmount(\"\");\r\n    setDate(\"\");\r\n  };\r\n\r\n  const submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\r\n    event.preventDefault();\r\n    const expenseItem = {\r\n      title,\r\n      amount,\r\n      date: new Date(date),\r\n    };\r\n    props.onSaveExpenseData(expenseItem);\r\n    clearFormHandler();\r\n    hideFormHandler();\r\n  };\r\n\r\n  const showFormHandler = () => {\r\n    setShouldFormBeDisplayed(true);\r\n  };\r\n\r\n  const hideFormHandler = () => {\r\n    setShouldFormBeDisplayed(false);\r\n  };\r\n\r\n  if (shouldFormBeDisplayed === false) {\r\n    return <button onClick={showFormHandler}>Add New Expense</button>;\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input type=\"text\" value={title} onChange={titleChangeHandler} />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={amount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={date}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"button\" onClick={hideFormHandler}>\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React from \"react\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport \"./NewExpense.css\";\r\n\r\ninterface NewExpenseProps {\r\n  onAddExpense: (expenseItem: {\r\n    id: string;\r\n    title: string;\r\n    amount: string;\r\n    date: Date;\r\n  }) => void;\r\n}\r\n\r\nconst NewExpense: React.FC<NewExpenseProps> = (props) => {\r\n  const saveExpenseDataHandler = (enteredExpenseData: {\r\n    title: string;\r\n    amount: string;\r\n    date: Date;\r\n  }) => {\r\n    const expenseItem = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddExpense(expenseItem);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import { useState } from \"react\";\r\nimport Expenses from \"./components/Expense/Expenses\";\r\nimport NewExpense from \"./components/NewExpense/NewExpense\";\r\n\r\nconst DUMMY_EXPENSES = [\r\n  {\r\n    id: \"e1\",\r\n    title: \"Toilet Paper\",\r\n    amount: 94.12,\r\n    date: new Date(2020, 7, 14),\r\n  },\r\n  { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\r\n  {\r\n    id: \"e3\",\r\n    title: \"Car Insurance\",\r\n    amount: 294.67,\r\n    date: new Date(2021, 2, 28),\r\n  },\r\n  {\r\n    id: \"e4\",\r\n    title: \"New Desk (Wooden)\",\r\n    amount: 450,\r\n    date: new Date(2021, 5, 12),\r\n  },\r\n];\r\n\r\nconst App: React.FC = () => {\r\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\r\n\r\n  const onAddExpenseHandler = (expenseItem: {\r\n    id: string;\r\n    title: string;\r\n    amount: string;\r\n    date: Date;\r\n  }) => {\r\n    setExpenses((prevExpenses) => {\r\n      return [\r\n        { ...expenseItem, amount: parseFloat(expenseItem.amount) },\r\n        ...prevExpenses,\r\n      ];\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <NewExpense onAddExpense={onAddExpenseHandler} />\r\n      <Expenses expenses={expenses} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}